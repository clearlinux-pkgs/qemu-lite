Author Xiao, Guangrong <guangrong.xiao@intel.com>

when SRIOV is used, QEMU will pre-allocate all guest memory including NVDIMM, 
as for NVDIMM, QEMU needs to read the whole image into memory.
pre-allocating memory for NVDIMM is not necessary for CC use case,

diff --git a/hw/mem/nvdimm.c b/hw/mem/nvdimm.c
index 0a602f2..8729c90 100644
--- a/hw/mem/nvdimm.c
+++ b/hw/mem/nvdimm.c
@@ -23,14 +23,25 @@
  */

 #include "qemu/osdep.h"
+#include "qapi/error.h"
 #include "hw/mem/nvdimm.h"

+static MemoryRegion *nvdimm_get_memory_region(PCDIMMDevice *dimm)
+{
+    MemoryRegion *mr = host_memory_backend_get_memory(dimm->hostmem, &error_abort);
+
+    mr->nvdimm_device = true;
+    return mr;
+}
+
 static void nvdimm_class_init(ObjectClass *oc, void *data)
 {
     DeviceClass *dc = DEVICE_CLASS(oc);
+    PCDIMMDeviceClass *ddc = PC_DIMM_CLASS(oc);

     /* nvdimm hotplug has not been supported yet. */
     dc->hotpluggable = false;
+    ddc->get_memory_region = nvdimm_get_memory_region;
 }

 static TypeInfo nvdimm_info = {
diff --git a/hw/vfio/common.c b/hw/vfio/common.c
index f27db36..b903b83 100644
--- a/hw/vfio/common.c
+++ b/hw/vfio/common.c
@@ -249,7 +249,8 @@ static bool vfio_listener_skipped_section(MemoryRegionSection *section)
             * are never accessed by the CPU and beyond the address width of
             * some IOMMU hardware.  TODO: VFIO should tell us the IOMMU width.
             */
-           section->offset_within_address_space & (1ULL << 63);
+           section->offset_within_address_space & (1ULL << 63) ||
+           section->mr->nvdimm_device;
 }

 static void vfio_iommu_map_notify(Notifier *n, void *data)
diff --git a/include/exec/memory.h b/include/exec/memory.h
index e2a3e99..5897e50 100644
--- a/include/exec/memory.h
+++ b/include/exec/memory.h
@@ -165,6 +165,7 @@ struct MemoryRegion {
     bool subpage;
     bool readonly; /* For RAM regions */
     bool rom_device;
+    bool nvdimm_device;
     bool flush_coalesced_mmio;
     bool global_locking;
     uint8_t dirty_log_mask;
                                                             


 
