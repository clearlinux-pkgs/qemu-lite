From 3358721e39eed743a2efe9721714c59dbf6b5411 Mon Sep 17 00:00:00 2001
From: Mauricio Martin Munoz <mauricio.martin.munoz@intel.com>
Date: Mon, 5 Sep 2016 17:00:17 -0500
Subject: [PATCH] removing coroutines of 9p to increase the I/O  performance

Signed-off-by: Chao Peng <chao.p.peng@intel.com>
---
 hw/9pfs/9p.c               | 9 +++++----
 hw/9pfs/9p.h               | 6 +++---
 hw/9pfs/coth.h             | 2 ++
 hw/9pfs/virtio-9p-device.c | 2 +-
 4 files changed, 11 insertions(+), 8 deletions(-)

diff --git a/hw/9pfs/9p.c b/hw/9pfs/9p.c
index aab1da1..4d909a6 100644
--- a/hw/9pfs/9p.c
+++ b/hw/9pfs/9p.c
@@ -663,7 +663,7 @@ static void pdu_complete(V9fsPDU *pdu, ssize_t len)
     pdu_push_and_notify(pdu);
 
     /* Now wakeup anybody waiting in flush for this request */
-    qemu_co_queue_next(&pdu->complete);
+    //qemu_co_queue_next(&pdu->complete);
 
     pdu_free(pdu);
 }
@@ -3257,7 +3257,7 @@ static inline bool is_read_only_op(V9fsPDU *pdu)
 
 void pdu_submit(V9fsPDU *pdu)
 {
-    Coroutine *co;
+    //Coroutine *co;
     CoroutineEntry *handler;
     V9fsState *s = pdu->s;
 
@@ -3271,8 +3271,9 @@ void pdu_submit(V9fsPDU *pdu)
     if (is_ro_export(&s->ctx) && !is_read_only_op(pdu)) {
         handler = v9fs_fs_ro;
     }
-    co = qemu_coroutine_create(handler);
-    qemu_coroutine_enter(co, pdu);
+    handler(pdu);
+//   co = qemu_coroutine_create(handler);
+//   qemu_coroutine_enter(co, pdu);
 }
 
 /* Returns 0 on success, 1 on failure. */
diff --git a/hw/9pfs/9p.h b/hw/9pfs/9p.h
index 1a19418..364cd0a 100644
--- a/hw/9pfs/9p.h
+++ b/hw/9pfs/9p.h
@@ -283,21 +283,21 @@ extern int total_open_fd;
 static inline void v9fs_path_write_lock(V9fsState *s)
 {
     if (s->ctx.export_flags & V9FS_PATHNAME_FSCONTEXT) {
-        qemu_co_rwlock_wrlock(&s->rename_lock);
+       // qemu_co_rwlock_wrlock(&s->rename_lock);
     }
 }
 
 static inline void v9fs_path_read_lock(V9fsState *s)
 {
     if (s->ctx.export_flags & V9FS_PATHNAME_FSCONTEXT) {
-        qemu_co_rwlock_rdlock(&s->rename_lock);
+      //  qemu_co_rwlock_rdlock(&s->rename_lock);
     }
 }
 
 static inline void v9fs_path_unlock(V9fsState *s)
 {
     if (s->ctx.export_flags & V9FS_PATHNAME_FSCONTEXT) {
-        qemu_co_rwlock_unlock(&s->rename_lock);
+      //  qemu_co_rwlock_unlock(&s->rename_lock);
     }
 }
 
diff --git a/hw/9pfs/coth.h b/hw/9pfs/coth.h
index 209fc6a..9a412c7 100644
--- a/hw/9pfs/coth.h
+++ b/hw/9pfs/coth.h
@@ -46,6 +46,8 @@
         qemu_coroutine_yield();                                         \
     } while (0)
 
+#undef v9fs_co_run_in_worker
+#define v9fs_co_run_in_worker(code_block) do {code_block} while(0);
 extern void co_run_in_worker_bh(void *);
 extern int v9fs_init_worker_threads(void);
 extern int v9fs_co_readlink(V9fsPDU *, V9fsPath *, V9fsString *);
diff --git a/hw/9pfs/virtio-9p-device.c b/hw/9pfs/virtio-9p-device.c
index a38850e..91b2a9e 100644
--- a/hw/9pfs/virtio-9p-device.c
+++ b/hw/9pfs/virtio-9p-device.c
@@ -71,7 +71,7 @@ static void handle_9p_output(VirtIODevice *vdev, VirtQueue *vq)
         pdu->id = out.id;
         pdu->tag = le16_to_cpu(out.tag_le);
 
-        qemu_co_queue_init(&pdu->complete);
+        // qemu_co_queue_init(&pdu->complete);
         pdu_submit(pdu);
     }
 }
-- 
2.1.0

